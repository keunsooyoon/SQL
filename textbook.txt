SELECT *
FROM employees;
-- *은 모든 열 모든 데이터를 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id, first_name, last_name
FROM employees;
-- select 뒤의 열들만 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id, first_name, last_name
FROM employees
ORDER BY employee_id DESC;
-- select 뒤의 열들만 조회
-- employee_id를 기준으로 내림차순DESC 정렬

SELECT DISTINCT job_id
FROM employees
-- job_id를 기준으로 고유한 값들만 
-- 즉, 중복 제거된 결과

SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성
FROM employees;
-- AS를 사용하여 열이름을 변경하여 출력한다.

SELECT employee_id, first_name || last_name
FROM employees;
-- 두 개열을 붙여서 하나의 데이터 값으로 나타낸다.

SELECT employee_id, 
        first_name || ' ' || last_name,
        email||'@'||'company.com'
FROM employees;
-- 두 개열을 붙여서 하나의 데이터 값으로 나타낸다. 
-- 가운데 한칸 띄기 

SELECT employee_id AS 사원번호, 
        salary AS 급여, 
        salary+500 AS 추가급여, 
        salary-100 AS 인하급여,
        (salary * 1.1)/2 AS 조정급여
FROM employees;
-- 열이름을 별명으로 잠시 보여줄때만 사용된다. 

SELECT *
FROM employees
WHERE employee_id = 100;
-- 아이디가 100 인 사람의 정보만 출력

SELECT *
FROM employees
WHERE first_name = 'David';
-- first_name 에서 David만 출력



SELECT *
FROM employees
WHERE salary BETWEEN 10000 AND 20000;

-- BETWEEN a AND b a와 b사이의 수 >=   <=



SELECT *
FROM employees
WHERE salary IN(1000,17000,24000);

-- IN =와 유사하지만 =은 하나만 조건으로 지정하고 
-- IN 은 값을 여러개 설정


SELECT *
FROM employees
WHERE job_id LIKE 'AD%';

-- LIKE는 명확하지 않은 조건으로 찾을때
-- ~처럼 ~같은 
-- 조건에는 문자나 숫자를 포함할 수 있다. 
-- % 모든 문자   _ 한글자 라는 의미이다. 


SELECT *
FROM employees
WHERE manager_id IS NULL;

-- 데이터 값이 null 인 경우를 조회
-- 0 이나 공백이 아닌 아무것도 없는 값이 null


SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

-- 조건을 모두 충족하는 데이터를 검색
-- AND를 계속 붙여 추가할 수 있다. 



SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR job_id = 'FI_ACCOUNT';

-- 조건을 모두 충족하는 데이터를 검색
-- AND나 OR 를 계속 붙여 추가할 수 있다. 



SELECT *
FROM employees
WHERE employee_id <> 105;

-- <>아니다. !=







SELECT *
FROM employees
WHERE manager_id IS NOT NULL;

-- IS NULL <> IS NOT NULL



SELECT last_name,
        LOWER(last_name) LOWER적용,
        UPPER(last_name) UPPER적용,
        email,
        INITCAP(email) INITCAP적용
FROM employees;


-- employee 테이블에서 last_name을 소문자와 대문자로 출력
-- email은 첫 글자만 대문자로 출력



SELECT job_id,
        SUBSTR(job_id,1,2)
FROM employees;


-- employee 테이블에서 job_id값의 첫 자리부터 두개 문자 출력



SELECT job_id,
        REPLACE(job_id,'ACCOUNT','ACCNT') 적용결과
FROM employees;


-- employee 테이블에서 job_id값에서 찾아서 바꾼다. 



SELECT first_name,
        LPAD(first_name, 12, ' ') 적용결과
FROM employees;


-- employee 테이블에서 first_name 값에서 12자리로 만들고 나머지를
-- 어떤 문자로 채운다. (* 또는 ' ')



SELECT job_id,
        LTRIM(job_id,'F') LTRIM적용결과,
        RTRIM(job_id,'T') RTRIM적용결과       
FROM employees;


-- 글자를 만나면 삭제..



SELECT TRIM('     Big Data     ')
FROM dual;

-- 앞 뒤 여백 강제 제거





SELECT salary,
        salary/30 일급,
        ROUND(salary/30,0) 적용결과0,
        ROUND(salary/30,1) 적용결과1,
        ROUND(salary/30, -1) 적용결과MINUS1
FROM employees;
-- 반올림할 자리값이 0이면 소수 첫째 자리에서 반올림
-- 반올림할 자리값이 -1이면 정수 첫째자리에서 반올림 




SELECT TO_CHAR(SYSDATE, 'YY/MM/DD/HH24:MI') 오늘날짜,
    SYSDATE + 1 더하기1,
    SYSDATE + 1 빼기1,
    TO_DATE('20171202')-TO_DATE('20171201') 날짜빼기,
    SYSDATE + 13/24 시간더하기
    
FROM DUAL;



SELECT SYSDATE, hire_date, MONTHS_BETWEEN(SYSDATE,hire_date) 적용결과
FROM employees
WHERE department_id = 100;
-- 날짜 사이의 개월수 구하기 




SELECT hire_date,
        ROUND(hire_date,'MONTH') 적용결과M,
        ROUND(hire_date,'YEAR') 적용결과Y,
        TRUNC(hire_date,'MONTH') 적용결과M,
        TRUNC(hire_date,'YEAR') 적용결과Y
FROM employees
WHERE employee_id BETWEEN 100 AND 106;
-- 년 월 일  





SELECT employee_id, first_name, last_name, salary,
    CASE
        WHEN salary >= 9000 THEN '상위급여'
        WHEN salary BETWEEN 6000 AND 8999 THEN '중귀급여'
        ELSE '하위급여'
    END AS 급여등급
FROM employees
WHERE job_id = 'IT_PROG'











































